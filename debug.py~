"""
For debug & testing
"""
import pandas as pd

from utils import grammar_processing as gp
from utils.first_follow import compute_firsts, compute_follows
from utils.grammar_cleaner import remove_left_recursion, remove_epsilon, remove_unit, remove_vars_nothing, remove_unreachable, remove_ambiguity, GrammarPipeline
from utils.tokenizer import tokenize

G = gp.load_grammar()[1]

# print(tokenize(G, 'int + int * ( int * int + int )'))

# print('Before:')
# print(G)

# GrammarPipeline(G, [
#     remove_epsilon,
#     remove_unit,
#     remove_vars_nothing,
#     remove_unreachable,
#     remove_left_recursion,
#     remove_ambiguity,
# ]).run()

# print('After:')
# print(G)

# Testing automatons

from NFA import NFA
import pydot
import numpy as np

# automaton = NFA(states=3, finals=[1], transitions={
#     (0, 'a'): [1],
#     (1, 'a'): [2],
#     (2, 'b'): [1],
#     (1, 'b'): [0]
# })
automaton = NFA(states=3, finals=[2], transitions={
    (0,'a'): [ 0 ],
    (0,'b'): [ 0, 1 ],
    (1,'a'): [ 2 ],
    (1,'b'): [ 2 ],
})

automaton.graph().write_png('automaton.png')

def create_matrix(r, c):
    ret = []
    for i in range(r):
        ret.append([])

        for j in range(c):
            ret[i].append([''])

    return ret

matrix = create_matrix(automaton.states, automaton.states)
nmatrix = create_matrix(automaton.states, automaton.states)

# initialize matrix
for i in range(automaton.states):
    for j in range(automaton.states):
        
        checked = False
        for symbol, nstates in automaton.transitions[i].items():
            if nstates[0] == j:
                matrix[i][j] = symbol
                checked = True
                break

        if not checked:
            matrix[i][j] = ''

for i in range(automaton.states):
    for j in range(automaton.states):
        for k in range(automaton.states):
            ajk = matrix[j][k]
            aji = matrix[j][i]
            aii = matrix[i][i]
            aik = matrix[i][k]
            aij = matrix[i][j]

            bjk = ajk
            if aji or aii or aik:
                if ajk:
                    bjk += '|'
            
            if aji:
                bjk += aji
            
            if aii:
                bjk += '(' + aii + ')*'
            
            if aik:
                bjk += aik
            
            bij = ''
            if aii:
                bij = '(' + aii + ')*'
            bij += aij

            nmatrix[j][k] = bjk
            nmatrix[i][j] = bij

    matrix = nmatrix
    nmatrix = create_matrix(automaton.states, automaton.states)


# for i in matrix:
#     for j in i:
#         if j == '':
#             print('0', end=' ')
#         else:
#             print(j, end=' ')
#     print()

regex = matrix[0][0]

def simplify(regex):
    ors = regex.split('|')

    seen = set()

    ret = ''
    for i in ors:
        if not i in seen:
            ret += i
            seen.add(i)
            ret += "|"

    return ret[:-1]

print(regex)
print(simplify(regex))w
